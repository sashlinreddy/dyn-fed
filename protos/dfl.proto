syntax = "proto3";

package ftml;

message Tensor {

    // the labels of the Type enum are all parsable by np.dtype()
    enum Type {
        float64	   = 0;    // Double precision float: sign bit, 11 bits exponent, 52 bits mantissa
        float32	   = 1;    // Single precision float: sign bit, 8 bits exponent, 23 bits mantissa
        float16	   = 2;    // Half precision float: sign bit, 5 bits exponent, 10 bits mantissa
        complex128 = 3;    // Complex number, represented by two 64-bit floats (real and imaginary components)
        complex64  = 4;    // Complex number, represented by two 32-bit floats (real and imaginary components)
        uint64	   = 5;    // Unsigned integer (0 to 18446744073709551615)
        uint32	   = 6;    // Unsigned integer (0 to 4294967295)
        uint16	   = 7;    // Unsigned integer (0 to 65535)
        uint8	   = 8;    // Unsigned integer (0 to 255)
        int64	   = 9;    // Integer (-9223372036854775808 to 9223372036854775807)
        int32	   = 10;   // Integer (-2147483648 to 2147483647)
        int16	   = 11;   // Integer (-32768 to 32767)
        int8	   = 12;   // Byte (-128 to 127)
        S128       = 13;   // String, 1 byte for every character, 128 bytes total
        S64        = 14;   // String, 1 byte for every character, 64 bytes total
        S32        = 15;   // String, 1 byte for every character, 32 bytes total
        S16        = 16;   // String, 1 byte for every character, 16 bytes total
        S8         = 17;   // String, 1 byte for every character, 8 bytes total
    }

    bytes data = 1;
    int32 rows = 2;
    int32 columns = 3;
    string dtype = 4;
    repeated int32 shape = 5;
    Type type = 6;
}

message Setup {
    int32 n_samples = 1;
    int32 state = 2;
    Tensor X = 3;
    Tensor y = 4;
}

message SetupResponse {
    float svd_idx = 1;
}

message CommSetup {
    int32 n_iterations = 1;
    int32 comm_interval = 2;
    int32 comm_every_iter = 3;
}

message Parameter {
    Tensor W = 1;
    Tensor b = 2;
}

message Subscription {
    repeated Parameter layers = 1;
}

message SubscriptionV2{
    repeated Tensor trainable_weights = 1;
}

message SubscriptionResponse {
    repeated Parameter layers = 1;
    Tensor most_rep = 2;
    float loss = 3;
}

message SubscriptionResponseV2 {
    repeated Tensor trainable_weights = 1;
    Tensor most_rep = 2;
    float loss = 3;
}